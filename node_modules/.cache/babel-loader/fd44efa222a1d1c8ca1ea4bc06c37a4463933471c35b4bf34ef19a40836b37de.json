{"ast":null,"code":"var _jsxFileName = \"/Users/semanurarslan/Desktop/frontend-developer-finance/src/pages/add_payment_plan.tsx\",\n  _s = $RefreshSig$();\nimport axiosInstance from \"../utils/axios\";\nimport { useEffect, useState } from \"react\";\nimport { MDBTabsContent, MDBRow, MDBCol, MDBListGroup, MDBListGroupItem } from 'mdb-react-ui-kit';\nimport Header from '../components/header';\nimport { useParams } from 'react-router-dom';\nimport PaymentForm from \"../components/form\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AddPaymentPlanPage() {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [paymentPlans, setPaymentPlans] = useState([]);\n  const [error, setError] = useState('');\n  const fetchData = async () => {\n    try {\n      const response = await axiosInstance.get(`/finance/debt/${id}`);\n      if (response.data.status === 'success') {\n        setFormData(response.data.data);\n        setPaymentPlans(response.data.data.paymentPlan);\n      } else if (response.data.status === 'error') {\n        setError(response.data.message);\n      }\n    } catch (error) {\n      setError('Verileri alırken bir hata oluştu.');\n    }\n  };\n  useEffect(() => {\n    fetchData();\n  }, []);\n  const calculateTotalAmount = (debtAmount, interestRate) => {\n    const total = debtAmount + debtAmount * (interestRate / 100);\n    return total;\n  };\n  const generatePaymentPlan = (amount, installment, paymentStart) => {\n    const totalAmount = amount;\n    const paymentAmount = totalAmount / installment;\n    const paymentPlans = [];\n    const currentDate = new Date(paymentStart);\n    for (let i = 0; i < installment; i++) {\n      const paymentDate = currentDate.toISOString().split('T')[0];\n      paymentPlans.push({\n        paymentDate,\n        paymentAmount\n      });\n      currentDate.setMonth(currentDate.getMonth() + 1);\n    }\n    return paymentPlans;\n  };\n  useEffect(() => {\n    const paymentPlan = generatePaymentPlan(formData.debtAmount, formData.installment, formData.paymentStart);\n    setFormData(prevState => ({\n      ...prevState,\n      paymentPlan: paymentPlan\n    }));\n  }, [formData.debtAmount, formData.installment, formData.paymentStart]);\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prevState => {\n      const updatedData = {\n        ...prevState,\n        [name]: name === 'paymentStart' ? value : value\n      };\n      if (name === 'debtAmount' || name === 'interestRate' || name === 'installment') {\n        const numericValue = parseFloat(value);\n        if (!isNaN(numericValue)) {\n          updatedData[name] = numericValue;\n          if (name === 'debtAmount' || name === 'interestRate') {\n            updatedData.amount = calculateTotalAmount(updatedData.debtAmount, updatedData.interestRate);\n          }\n          if (name === 'debtAmount' || name === 'installment') {\n            updatedData.paymentPlan = generatePaymentPlan(formData.amount, formData.installment, formData.paymentStart);\n          }\n        }\n      }\n      return updatedData;\n    });\n  };\n  const handleFocus = e => parseInt(e.target.value) === 0 && setFormData(prevState => ({\n    ...prevState,\n    [e.target.name]: ''\n  }));\n  const handleBlur = e => !e.target.value && setFormData(prevState => ({\n    ...prevState,\n    [e.target.name]: 0\n  }));\n  const handleSubmit = async e => {\n    var _formData$interestRat, _formData$installment;\n    e.preventDefault();\n    const dataToSend = {\n      ...formData,\n      debtAmount: formData.debtAmount,\n      interestRate: (_formData$interestRat = formData.interestRate) !== null && _formData$interestRat !== void 0 ? _formData$interestRat : 0,\n      amount: formData.amount,\n      installment: (_formData$installment = formData.installment) !== null && _formData$installment !== void 0 ? _formData$installment : 0\n    };\n    console.log(dataToSend);\n    try {\n      const response = await axiosInstance.put(`/finance/debt/${id}`, dataToSend);\n      if (response.data.status === 'success') {\n        const id = response.data.data.id;\n        fetchData();\n      } else if (response.data.status === 'error') {\n        setError(response.data.data);\n      }\n    } catch (error) {\n      setError('Formu gönderirken bir hata oluştu.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-light pages\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Add Payment Plan \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"containerForm\",\n      children: [/*#__PURE__*/_jsxDEV(PaymentForm, {\n        onSubmit: handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(MDBTabsContent, {\n        children: /*#__PURE__*/_jsxDEV(MDBRow, {\n          children: paymentPlans.map((plan, index) => /*#__PURE__*/_jsxDEV(MDBCol, {\n            md: \"6\",\n            className: \"mb-4\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"border\",\n              children: /*#__PURE__*/_jsxDEV(MDBListGroup, {\n                style: {\n                  minWidth: '22rem'\n                },\n                light: true,\n                children: /*#__PURE__*/_jsxDEV(MDBListGroupItem, {\n                  tag: \"label\",\n                  children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"text-bg-warning p-1 text-light\",\n                    children: [index + 1, \"st Installment\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 285,\n                    columnNumber: 15\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"fw-bold\",\n                      children: \"Payment Amount:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 286,\n                      columnNumber: 19\n                    }, this), \" \", plan.paymentAmount, \" \"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 286,\n                    columnNumber: 15\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"fw-bold\",\n                      children: \" Payment Date:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 287,\n                      columnNumber: 19\n                    }, this), \"  \", new Date(plan.paymentDate).toISOString().split('T')[0]]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 287,\n                    columnNumber: 15\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 284,\n                  columnNumber: 13\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 283,\n                columnNumber: 11\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 282,\n              columnNumber: 9\n            }, this)\n          }, plan.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 7\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 3\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 5\n  }, this);\n}\n_s(AddPaymentPlanPage, \"eSKVvLAzqZC+z6EjmIoNz2/fV6k=\", false, function () {\n  return [useParams];\n});\n_c = AddPaymentPlanPage;\nexport default AddPaymentPlanPage;\nvar _c;\n$RefreshReg$(_c, \"AddPaymentPlanPage\");","map":{"version":3,"names":["axiosInstance","useEffect","useState","MDBTabsContent","MDBRow","MDBCol","MDBListGroup","MDBListGroupItem","Header","useParams","PaymentForm","jsxDEV","_jsxDEV","AddPaymentPlanPage","_s","id","paymentPlans","setPaymentPlans","error","setError","fetchData","response","get","data","status","setFormData","paymentPlan","message","calculateTotalAmount","debtAmount","interestRate","total","generatePaymentPlan","amount","installment","paymentStart","totalAmount","paymentAmount","currentDate","Date","i","paymentDate","toISOString","split","push","setMonth","getMonth","formData","prevState","handleChange","e","name","value","target","updatedData","numericValue","parseFloat","isNaN","handleFocus","parseInt","handleBlur","handleSubmit","_formData$interestRat","_formData$installment","preventDefault","dataToSend","console","log","put","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","map","plan","index","md","style","minWidth","light","tag","_c","$RefreshReg$"],"sources":["/Users/semanurarslan/Desktop/frontend-developer-finance/src/pages/add_payment_plan.tsx"],"sourcesContent":["import axiosInstance from \"../utils/axios\";\nimport { useEffect, useState } from \"react\";\nimport {\n  MDBTabsContent,\n  MDBBtn,\n  MDBInput,\n  MDBValidation,\n  MDBValidationItem,\n  MDBRow,\n  MDBCol,\n  MDBListGroup,\n  MDBListGroupItem,\n} from 'mdb-react-ui-kit';\nimport Header from '../components/header';\nimport { useParams } from 'react-router-dom';\nimport PaymentForm from \"../components/form\";\n\ninterface PaymentPlanData {\n  id: string;\n  paymentAmount: number;\n  paymentDate: string;\n  isPaid: boolean;\n}\n\ninterface PaymentPlan {\n  paymentDate: string;\n  paymentAmount: number;\n}\n\ninterface FormData {\n  debtName: string;\n  lenderName: string;\n  debtAmount: number;\n  interestRate: number;\n  amount: number;\n  paymentStart: string;\n  installment: number;\n  description: string;\n  paymentPlan: PaymentPlan[];\n}\n\n\nfunction AddPaymentPlanPage() {\n\n  const { id } = useParams<{ id: string }>();\n  const [paymentPlans, setPaymentPlans] = useState<PaymentPlanData[]>([]);\n\n\n  const [error, setError] = useState<string>('');\n\n\n\n\n    const fetchData = async () => {\n      try {\n        const response = await axiosInstance.get(`/finance/debt/${id}`);\n        if (response.data.status === 'success') {\n          setFormData(response.data.data);\n          setPaymentPlans(response.data.data.paymentPlan)\n        } else if (response.data.status === 'error') {\n          setError(response.data.message);\n        }\n      } catch (error) {\n        setError('Verileri alırken bir hata oluştu.');\n      }\n    };\n\n    useEffect(() => {\n    fetchData();\n  }, []);\n\n  const calculateTotalAmount = (debtAmount: number, interestRate: number) => {\n    const total = debtAmount + (debtAmount * (interestRate / 100))\n    return total;\n  };\n\n  const generatePaymentPlan = (amount: number, installment: number, paymentStart: string): PaymentPlan[] => {\n    const totalAmount = amount;\n    const paymentAmount = totalAmount / installment;\n    const paymentPlans: PaymentPlan[] = [];\n\n    const currentDate = new Date(paymentStart);\n\n    for (let i = 0; i < installment; i++) {\n      const paymentDate = currentDate.toISOString().split('T')[0];\n      paymentPlans.push({\n        paymentDate,\n        paymentAmount\n      });\n\n      currentDate.setMonth(currentDate.getMonth() + 1);\n    }\n\n    return paymentPlans;\n  };\n\n  useEffect(() => {\n    const paymentPlan = generatePaymentPlan(formData.debtAmount, formData.installment, formData.paymentStart);\n    setFormData(prevState => ({\n      ...prevState,\n      paymentPlan: paymentPlan\n    }));\n  }, [formData.debtAmount, formData.installment, formData.paymentStart]);\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n\n    setFormData(prevState => {\n      const updatedData = {\n        ...prevState,\n        [name]: name === 'paymentStart' ? value : value\n      };\n\n\n      if (name === 'debtAmount' || name === 'interestRate' || name === 'installment') {\n        const numericValue = parseFloat(value);\n        if (!isNaN(numericValue)) {\n          updatedData[name] = numericValue;\n          if (name === 'debtAmount' || name === 'interestRate') {\n            updatedData.amount = calculateTotalAmount(updatedData.debtAmount, updatedData.interestRate);\n          }\n          if (name === 'debtAmount' || name === 'installment') {\n            updatedData.paymentPlan = generatePaymentPlan(formData.amount, formData.installment, formData.paymentStart);\n          }\n        }\n      }\n      return updatedData;\n\n    });\n  };\n\n  const handleFocus = (e: React.FocusEvent<HTMLInputElement>) => parseInt(e.target.value) === 0 && setFormData(prevState => ({ ...prevState, [e.target.name]: '' }));\n  const handleBlur = (e: React.FocusEvent<HTMLInputElement>) => !e.target.value && setFormData(prevState => ({ ...prevState, [e.target.name]: 0 }));\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    const dataToSend = {\n      ...formData,\n      debtAmount: formData.debtAmount,\n      interestRate: formData.interestRate ?? 0,\n      amount: formData.amount,\n      installment: formData.installment ?? 0\n    };\n\n    console.log(dataToSend)\n\n    try {\n      const response = await axiosInstance.put(`/finance/debt/${id}`, dataToSend);\n      if (response.data.status === 'success') {\n        const id = response.data.data.id\n        fetchData()\n      } else if (response.data.status === 'error') {\n        setError(response.data.data)\n      }\n    } catch (error) {\n      setError('Formu gönderirken bir hata oluştu.');\n    }\n  };\n\n\n\n  return (\n    <div className=\"bg-light pages\">\n      <Header />\n      <div>Add Payment Plan </div> \n      {error && <div className='error-message'>{error}</div>}\n      <div className=\"containerForm\">\n      <PaymentForm onSubmit={handleSubmit} />\n        \n      {/* <MDBTabsContent>\n          <MDBValidation onSubmit={handleSubmit}>\n            <MDBRow className='mb-2'>\n              <MDBCol>\n                <MDBValidationItem feedback='Please enter debt name' invalid className='form-item'>\n                  <span>Debt Name</span>\n                  <MDBInput wrapperClass='mb-4' required name='debtName' type='text' value={formData.debtName} onChange={handleChange} />\n                </MDBValidationItem>\n              </MDBCol>\n              <MDBCol>\n                <MDBValidationItem feedback='Please enter lender' invalid className='form-item'>\n                  <span>Lender</span>\n                  <MDBInput wrapperClass='mb-4' required name='lenderName' type='text' value={formData.lenderName} onChange={handleChange} />\n                </MDBValidationItem>\n              </MDBCol>\n            </MDBRow>\n\n            <MDBRow className='mb-2'>\n              <MDBCol>\n                <MDBValidationItem feedback='Please enter amount' invalid className='form-item'>\n                  <span>Amount</span>\n                  <MDBInput\n                    wrapperClass='mb-4'\n                    required\n                    name='debtAmount'\n                    type='number'\n                    value={formData.debtAmount}\n                    onChange={handleChange}\n                    onFocus={handleFocus}\n                    onBlur={handleBlur}\n                  />\n                </MDBValidationItem>\n              </MDBCol>\n              <MDBCol>\n                <MDBValidationItem feedback='Please enter interest rate' invalid className='form-item'>\n                  <span>Interest rate (%)</span>\n                  <MDBInput\n                    wrapperClass='mb-4'\n                    required\n                    name='interestRate'\n                    type='number'\n                    value={formData.interestRate}\n                    onFocus={handleFocus}\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                  />\n                </MDBValidationItem>\n              </MDBCol>\n            </MDBRow>\n\n            <MDBRow className='mb-2'>\n              <MDBCol>\n                <MDBValidationItem feedback='' invalid className='form-item'>\n                  <span>Total</span>\n                  <MDBInput\n                    wrapperClass='mb-4'\n                    required\n                    name='amount'\n                    type='number'\n                    value={formData.amount}\n\n                    disabled\n                  />\n                </MDBValidationItem>\n              </MDBCol>\n              <MDBCol>\n                <MDBValidationItem feedback='Please enter starting date' invalid className='form-item'>\n                  <span>Starting Date</span>\n                  <MDBInput\n                    wrapperClass='mb-4'\n                    required\n                    name='paymentStart'\n                    type='date'\n                    value={formData.paymentStart}\n                    onChange={handleChange}\n                  />\n                </MDBValidationItem>\n              </MDBCol>\n            </MDBRow>\n\n            <MDBRow className='mb-2'>\n              <MDBCol>\n                <MDBValidationItem feedback='Please enter number of installments' invalid className='form-item'>\n                  <span>Number of Installments</span>\n                  <MDBInput\n                    wrapperClass='mb-4'\n                    required\n                    name='installment'\n                    type='number'\n                    value={formData.installment}\n                    onChange={handleChange}\n                    onFocus={handleFocus}\n                    onBlur={handleBlur}\n                  />\n                </MDBValidationItem>\n              </MDBCol>\n              <MDBCol>\n                <MDBValidationItem feedback='Please enter description' invalid className='form-item'>\n                  <span>Description</span>\n                  <MDBInput wrapperClass='mb-4' required name='description' type='text' value={formData.description} onChange={handleChange} />\n                </MDBValidationItem>\n              </MDBCol>\n            </MDBRow>\n\n            <MDBBtn type=\"submit\" className=\"mb-4 w-100\">Create Payment Plan</MDBBtn>\n          </MDBValidation>\n        </MDBTabsContent> */}\n\n        <MDBTabsContent>\n  <MDBRow>\n    {paymentPlans.map((plan: PaymentPlanData, index) => (\n      <MDBCol key={plan.id} md=\"6\" className=\"mb-4\">\n        <div className='border'>\n          <MDBListGroup style={{ minWidth: '22rem' }} light>\n            <MDBListGroupItem tag='label'>\n              <p className='text-bg-warning p-1 text-light'>{index + 1}st Installment</p>\n              <p> <span className=\"fw-bold\">Payment Amount:</span> {plan.paymentAmount} </p>\n              <p> <span className=\"fw-bold\"> Payment Date:</span>  {new Date(plan.paymentDate).toISOString().split('T')[0]}</p>\n            </MDBListGroupItem>\n          </MDBListGroup>\n        </div>\n      </MDBCol>\n    ))}\n  </MDBRow>\n</MDBTabsContent>\n\n\n      </div>\n    </div>\n  );\n}\n\nexport default AddPaymentPlanPage;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}