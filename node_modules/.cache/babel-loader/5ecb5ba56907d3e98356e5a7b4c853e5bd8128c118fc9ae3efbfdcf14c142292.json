{"ast":null,"code":"var _jsxFileName = \"/Users/semanurarslan/Desktop/frontend-developer-finance/src/components/DebtForm.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { MDBValidation } from 'mdb-react-ui-kit';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { updateFormData, updatePaymentPlan } from '../redux/reducers/debt_slice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DebtForm = ({\n  onSubmit,\n  error\n}) => {\n  _s();\n  const dispatch = useDispatch();\n  const formData = useSelector(state => state.form.formData);\n  const calculateTotalAmount = (debtAmount, interestRate) => {\n    const total = debtAmount + debtAmount * (interestRate / 100);\n    return total;\n  };\n  const generatePaymentPlan = (amount, installment, paymentStart) => {\n    const totalAmount = amount;\n    const paymentAmount = totalAmount / installment;\n    const paymentPlans = [];\n    const currentDate = new Date(paymentStart);\n    for (let i = 0; i < installment; i++) {\n      const paymentDate = currentDate.toISOString().split('T')[0];\n      paymentPlans.push({\n        paymentDate,\n        paymentAmount\n      });\n      currentDate.setMonth(currentDate.getMonth() + 1);\n    }\n    return paymentPlans;\n  };\n  useEffect(() => {\n    const paymentPlan = generatePaymentPlan(formData.amount, formData.installment, formData.paymentStart);\n    dispatch(updatePaymentPlan(paymentPlan));\n  }, [formData.amount, formData.installment, formData.paymentStart]);\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    dispatch(updateFormData({\n      name,\n      value\n    }));\n    if (name === 'debtAmount' || name === 'interestRate') {\n      const numericValue = parseFloat(value);\n      if (!isNaN(numericValue)) {\n        const amount = calculateTotalAmount(numericValue, formData.interestRate);\n        dispatch(updateFormData({\n          name: 'amount',\n          value: amount.toString()\n        }));\n      }\n    }\n    if (name === 'debtAmount' || name === 'installment') {\n      const numericValue = parseFloat(value);\n      if (!isNaN(numericValue)) {\n        const paymentPlan = generatePaymentPlan(numericValue, formData.installment, formData.paymentStart);\n        dispatch(updatePaymentPlan(paymentPlan));\n      }\n    }\n  };\n  const handleFocus = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    if (parseInt(value) === 0) {\n      dispatch(updateFormData({\n        name,\n        value: ''\n      }));\n    }\n  };\n  const handleBlur = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    if (!value) {\n      dispatch(updateFormData({\n        name,\n        value: '0'\n      }));\n    }\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit(formData);\n  };\n  return /*#__PURE__*/_jsxDEV(MDBValidation, {\n    onSubmit: handleSubmit\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n_s(DebtForm, \"YT25863g6iq0ZjF3Kp3JpRAtAR4=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = DebtForm;\nexport default DebtForm;\nvar _c;\n$RefreshReg$(_c, \"DebtForm\");","map":{"version":3,"names":["React","useEffect","MDBValidation","useSelector","useDispatch","updateFormData","updatePaymentPlan","jsxDEV","_jsxDEV","DebtForm","onSubmit","error","_s","dispatch","formData","state","form","calculateTotalAmount","debtAmount","interestRate","total","generatePaymentPlan","amount","installment","paymentStart","totalAmount","paymentAmount","paymentPlans","currentDate","Date","i","paymentDate","toISOString","split","push","setMonth","getMonth","paymentPlan","handleChange","e","name","value","target","numericValue","parseFloat","isNaN","toString","handleFocus","parseInt","handleBlur","handleSubmit","preventDefault","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/semanurarslan/Desktop/frontend-developer-finance/src/components/DebtForm.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { MDBBtn, MDBInput, MDBValidation, MDBValidationItem, MDBRow, MDBCol } from 'mdb-react-ui-kit';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { RootState } from '../redux/store';\nimport { updateFormData, updatePaymentPlan } from '../redux/reducers/debt_slice';\n\ninterface PaymentPlan {\n  paymentDate: string;\n  paymentAmount: number;\n}\n\ninterface DebtFormProps {\n  onSubmit: (data: FormData) => void;\n  error: string;\n}\n\nconst DebtForm: React.FC<DebtFormProps> = ({ onSubmit, error }) => {\n  const dispatch = useDispatch();\n  const formData = useSelector((state: RootState) => state.form.formData);\n\n  const calculateTotalAmount = (debtAmount: number, interestRate: number) => {\n    const total = debtAmount + (debtAmount * (interestRate / 100));\n    return total;\n  };\n\n  const generatePaymentPlan = (amount: number, installment: number, paymentStart: string): PaymentPlan[] => {\n    const totalAmount = amount;\n    const paymentAmount = totalAmount / installment;\n    const paymentPlans: PaymentPlan[] = [];\n    const currentDate = new Date(paymentStart);\n\n    for (let i = 0; i < installment; i++) {\n      const paymentDate = currentDate.toISOString().split('T')[0];\n      paymentPlans.push({\n        paymentDate,\n        paymentAmount\n      });\n\n      currentDate.setMonth(currentDate.getMonth() + 1);\n    }\n\n    return paymentPlans;\n  };\n\n  useEffect(() => {\n    const paymentPlan = generatePaymentPlan(formData.amount, formData.installment, formData.paymentStart);\n    dispatch(updatePaymentPlan(paymentPlan));\n  }, [formData.amount, formData.installment, formData.paymentStart]);\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n\n    dispatch(updateFormData({ name, value }));\n\n    if (name === 'debtAmount' || name === 'interestRate') {\n      const numericValue = parseFloat(value);\n      if (!isNaN(numericValue)) {\n        const amount = calculateTotalAmount(numericValue, formData.interestRate);\n        dispatch(updateFormData({ name: 'amount', value: amount.toString() }));\n      }\n    }\n\n    if (name === 'debtAmount' || name === 'installment') {\n      const numericValue = parseFloat(value);\n      if (!isNaN(numericValue)) {\n        const paymentPlan = generatePaymentPlan(numericValue, formData.installment, formData.paymentStart);\n        dispatch(updatePaymentPlan(paymentPlan));\n      }\n    }\n  };\n\n  const handleFocus = (e: React.FocusEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    if (parseInt(value) === 0) {\n      dispatch(updateFormData({ name, value: '' }));\n    }\n  };\n\n  const handleBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    if (!value) {\n      dispatch(updateFormData({ name, value: '0' }));\n    }\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    onSubmit(formData);\n  };\n\n  return (\n    <MDBValidation onSubmit={handleSubmit}>\n      {/* Form inputlarÄ± burada */}\n    </MDBValidation>\n  );\n};\n\nexport default DebtForm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}